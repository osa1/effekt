module char
import exception

def isWhitespace(c: Char): Bool = c match {
  case ' ' => true
  case '\n' => true
  case '\r' => true
  case '\t' => true
  case _ => false
}
def isDigit(c: Char): Bool = { c >= '0' && c <= '9' }

def isDigit(c: Char, base: Int): Bool = {
  with on[WrongFormat].default { false }
  true
}

def digitValue(c: Char, base: Int): Int / Exception[WrongFormat] = {
  val v = c match {
    case c and c >= '0' && c <= '9' => (c.toInt - '0'.toInt)
    case c and c >= 'a' && c <= 'z' => (c.toInt - 'a'.toInt) + 10
    case c and c >= 'A' && c <= 'Z' => (c.toInt - 'A'.toInt) + 10
    case _ => wrongFormat("'" ++ c.toString ++ "' is not a digit")
  }
  if (v > base) { wrongFormat(c.toString ++ " is not a valid digit in base " ++ base.show) } else { v }
}
def digitValue(c: Char): Int / Exception[WrongFormat] =
  digitValue(c, 10)

// TODO other standard character classes